/**
 * Copyright (c) 1999-2017, Fiorano Software Inc. and affiliates.
 *
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of Fiorano Software ("Confidential Information").  You
 * shall not disclose such Confidential Information and shall use
 * it only in accordance with the terms of the license agreement
 * enclosed with this product or entered into with Fiorano.
 */
package com.fiorano.stf;

import com.fiorano.stf.consts.TestEnvironmentConstants;
import com.fiorano.stf.framework.*;
import com.fiorano.stf.logger.DRTTestLogger;
import com.fiorano.stf.test.core.*;
import com.fiorano.stf.util.StringHashtable;
import junit.framework.TestCase;
import junit.framework.TestResult;
import junit.framework.TestSuite;
import junit.textui.TestRunner;

import java.io.File;
import java.util.*;

/**
 * Created by IntelliJ IDEA.
 * User: Ibrahim Shaik
 * Date: May 7, 2007
 * Time: 10:16:20 AM
 * To change this template use File | Settings | File Templates.
 */

/**
 * This is the main class for STF and manage the lifecycle of test execution.
 * Vatious stages in life cycle includes initialization, execution, validation (test result) and reporting.
 * This class is repsonsible for initiali
 */
public class ESBTestHarness implements TestHarness {


    private TestEnvironment testEnvironment;
    private static TestEnvironmentConfig testEnvConfig;
    private TestSpecification testSpecification;
    public TestResult result;
    public STFXMLTestListener listener;

    private String serverCare = "START";

    private ServerStatusController serverStatusController;

    /**
     * This is the main method that will be invoked when test harness is invoked.
     *
     * @throws STFException
     */
    public void execute() throws STFException {
        if (testEnvConfig != null) {

            // Initialize
            try {
                initializeTestEnvironment(testEnvConfig.getProperty(TestEnvironmentConstants.TEST_ENVIRONMENT));
            }
            catch (STFException e) {
                System.out.println("ERROR while INITIALIZING 'TestEnvironment'. Not Running the tests.\n");
                e.printStackTrace();
            }
            try {
                initializeTestSpecification(testEnvConfig.getProperty(TestEnvironmentConstants.TEST_SPECIFICATION));
            }
            catch (STFException e) {
                System.out.println("ERROR while INITIALIZING 'Test Specifications'. Not Running the tests.\n");
                e.printStackTrace();
            }

            serverStatusController = ServerStatusController.getInstance();
            serverStatusController.setTestEnvironment(testEnvironment);

            // Iterate through all the test suites.
            for (Object entries : testSpecification.getTestSuites().entrySet()) {
                Map.Entry entry = (Map.Entry) entries;
                TestSuiteElement testSuite = (TestSuiteElement) entry.getValue();
                serverStatusController.refresh();
                serverStatusController.setCurrentSuiteElement(testSuite);

                //if serverCare is "START" (i.e, servers are to be started and shut down by stf) otherwise just provide 'pass'
                if (serverCare.equals("START")) {
                    // Deploy Profiles
                    try {
                        deployProfiles(testSuite);
                    }
                    catch (STFException e) {
                        System.out.println("ERROR while DEPLOYING the PROFILES. Not Executing the test suite :" + testSuite.getName() + "\n");
                        e.printStackTrace();
                        continue;
                    }
                    //Start Servers
                    Hashtable hash = testSuite.getServers();
                    Enumeration servers = hash.elements();
                    while (servers.hasMoreElements()) {
                        TCServerElement tcServer = (TCServerElement) servers.nextElement();
                        ServerElement server = testEnvironment.getServer(tcServer.getName());
                        Map<String, ProfileElement> profiles = server.getProfileElements();
                        if (server.isHA()) {

                            String gatewayServerAddress = testEnvironment.getMachine(server.getGatewayMachine()).getAddress();
                            boolean isGatewayMachineWindows = testEnvironment.getMachine(server.getGatewayMachine()).isWindows();
                            String shareName = server.getShareName();
                            String primaryServerAddress = testEnvironment.getMachine(profiles.get("primary").getMachineName()).getAddress();
                            String secondaryServerAddress = testEnvironment.getMachine(profiles.get("secondary").getMachineName()).getAddress();

                            String lockPath = profiles.get("primary").getLockFilePath();
                            if (!lockPath.startsWith("//")) {
                                String primaryLockFilePath = lockPath.substring(0, lockPath.lastIndexOf(File.separator));
                                mountLock(gatewayServerAddress, primaryServerAddress, primaryLockFilePath, isGatewayMachineWindows, shareName);
                            }

                            lockPath = profiles.get("secondary").getLockFilePath();
                            if (!lockPath.startsWith("//")) {
                                String secondaryLockFilePath = lockPath.substring(0, lockPath.lastIndexOf(File.separator));
                                mountLock(gatewayServerAddress, secondaryServerAddress, secondaryLockFilePath, isGatewayMachineWindows, shareName);
                            }
                        }
                    }
                    startServers(testSuite);
                    sleep(5000);
                }

                // Run Tests
//                if(testSuite instanceof TestSuiteElement) {
                sleep(1500);
                runTestSuite(testSuite);
//                }

                //Cleanup Test Environment (Stop the servers) if serverCare is "START" otherwise just pass
                if (serverCare.equals("START"))
                    cleanupTestEnvironment(testSuite);
            }
        } else
            throw new STFException("Test Environment Config object not initialized ");
    }


    public void setTestEnvConfig(TestEnvironmentConfig testEnvConfig) {
        this.testEnvConfig = testEnvConfig;
    }

    public static TestEnvironmentConfig getTestEnvConfig() {
        return testEnvConfig;
    }


    private boolean toFile;

    /**
     * This will run the test cases.
     *
     * @param testSuiteElem
     * @throws STFException Will throw exception incase the data invalid or some problem with running tests.
     */

    public void runTestSuite(TestSuiteElement testSuiteElem) {
        runTestSuite(testSuiteElem, "");
    }

    public void runTestSuite(TestSuiteElement testSuiteElem, String serversStatus) {

        List peerServerNames = getPeerServerNames(testSuiteElem.getServers().elements());
        serverStatusController.initiate();
        TestSuite flowTestSuite = new STFTestSuite(testSuiteElem.getName(), peerServerNames);
        try {
            serverStatusController.setFPSAddress((String) peerServerNames.get(0));
        } catch (STFException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }

        for (Object entries : testSuiteElem.getTestCases().entrySet()) {
            Map.Entry entry = (Map.Entry) entries;
            TestCaseElement testElem = (TestCaseElement) entry.getValue();
            testElem.setEnterpriseServerUrl(getUrl(testSuiteElem.getEnterpriseServer()));
            TestCase testCase;
            if (testElem instanceof FlowTestCaseElement) {
                testCase = new FlowTestCase(testElem);
                flowTestSuite.addTest(testCase);
            } else if (testElem instanceof DRTTestCaseElement) {
                testCase = new DRTTestCase(testElem);
                TestSuite testSuite = new STFTestSuite(((DRTTestCase) testCase).getTestCaseClassPath() + "-" + ((DRTTestCase) testCase).getName(), peerServerNames);
                ((STFTestSuite) testSuite).addTestSuite(testCase, serverStatusController);

                System.out.println("Running Test Cases ...");

                result = new TestResult();
                listener = new STFXMLTestListener();
                toFile = listener.setFile("reports/TEST-" + testSuite.getName(), serversStatus, ".xml");
                listener.startTestSuite(testSuite);
                result.addListener(listener);
                try {
                    if (toFile)
                        testSuite.run(result);
                    else
                        TestRunner.run(testSuite);
                }
                finally {
                    generateReport();
                }
                try {
                    ServerStatusController.getInstance().getCurrentSuiteElement().setEnterpriseServer(getAddress(ServerStatusController.getInstance().getURLOnFESActive()));
                } catch (STFException e) {
                    throw new RuntimeException("Unable to refresh active fes url in test suite element.", e);
                }
            } else {
                System.out.println("Defined unsupported test type: " + testElem.getName());
            }
        }


        if (flowTestSuite.testCount() > 0) {
            System.out.println("Running Test Cases ...");
            result = new TestResult();
            listener = new STFXMLTestListener();
            toFile = listener.setFile("reports/TEST-" + flowTestSuite.getName(), serversStatus, ".xml");
            listener.startTestSuite(flowTestSuite);
            result.addListener(listener);
            if (toFile)
                flowTestSuite.run(result);
            else
                TestRunner.run(flowTestSuite);

            generateReport();
        }
    }

    private List getPeerServerNames(Enumeration servers) {
        List peerServers = new ArrayList();
        while (servers.hasMoreElements()) {
            TCServerElement tcServer = (TCServerElement) servers.nextElement();
            ServerElement server = testEnvironment.getServer(tcServer.getName());
            if (server.getMode().equalsIgnoreCase(TestEnvironmentConstants.FPS))
                peerServers.add(server.getServerName());
        }
        return peerServers;
    }

    private String getUrl(String hostName) {  //to get the URL of the active FES
        //todo on case port number is configurable, set that here.
        try {
            if (serverStatusController.getSecondaryFESStatus() != null) {
                if (serverStatusController.getSecondaryFESStatus().charAt(0) == 'A' || serverStatusController.getSecondaryFESStatus().charAt(0) == 'S')
                    return "tsp_tcp://" + hostName + ":1948";
                else
                    return "tsp_tcp://" + hostName + ":1947";
            } else
                return "tsp_tcp://" + hostName + ":1947";    //other guy is waitin

        } catch (STFException e) {
            e.printStackTrace();
            System.out.println("Found STFexception in getUrl");
            return null;
        }
        catch (Exception e) {
            e.printStackTrace();
            System.out.println("Found exception in getUrl");
            return null;
        }
    }


    private void startServers(TestSuiteElement testSuite) {
        StringHashtable peerServersList = testSuite.getServers();
        for (Enumeration servers = peerServersList.elements(); servers.hasMoreElements();) {
            TCServerElement tcServer = (TCServerElement) servers.nextElement();
            startServer(tcServer, TestEnvironmentConstants.FES);
        }
        for (Enumeration servers = peerServersList.elements(); servers.hasMoreElements();) {
            TCServerElement tcServer = (TCServerElement) servers.nextElement();
            startServer(tcServer, TestEnvironmentConstants.FPS);
        }
    }

    private void startServer(TCServerElement tcServer, String serverType) {
        ServerElement server = testEnvironment.getServer(tcServer.getName());
        if (!server.isAutoStartServer())
            return;
        if (!(server.getMode().equalsIgnoreCase(serverType)))
            return;
        ExecutionController remoteProxy = ExecutionController.getInstance();
        Map<String, ProfileElement> profiles = server.getProfileElements();
        ProfileElement profileElem;
        if (server.isHA()) {
            profileElem = profiles.get("primary");
            remoteProxy.startServerOnRemote(testEnvironment.getMachine(profileElem.getMachineName()).getAddress(),
                    server.getMode(), profileElem.getProfileName(), profileElem.isWrapper(), true);

            profileElem = profiles.get("secondary");
            remoteProxy.startServerOnRemote(testEnvironment.getMachine(profileElem.getMachineName()).getAddress(),
                    server.getMode(), profileElem.getProfileName(), profileElem.isWrapper(), true);
        } else {
            profileElem = profiles.get("standalone");
            remoteProxy.startServerOnRemote(testEnvironment.getMachine(profileElem.getMachineName()).getAddress(),
                    server.getMode(), profileElem.getProfileName(), profileElem.isWrapper(), false);
        }
    }

    private void mountLock(String gatewayServerAddress, String serverAddress, String lockFilePath, boolean isGatewayMachineWindows, String shareName) {
        ExecutionController remoteProxy = ExecutionController.getInstance();
        String gatewayMachineOS = null;
        if (isGatewayMachineWindows) {
            gatewayMachineOS = "windows";
            remoteProxy.mountlock(gatewayServerAddress, serverAddress, lockFilePath, gatewayMachineOS, shareName);
        } else {
            gatewayMachineOS = "unix";
            remoteProxy.mountlock(gatewayServerAddress, serverAddress, lockFilePath, gatewayMachineOS, null);
        }

    }

    private void unMountLock(String serverAddress, String lockFilePath) {
        ExecutionController remoteProxy = ExecutionController.getInstance();
        remoteProxy.unMountlock(serverAddress, lockFilePath);
    }

    /**
     * This will generate the report of test execution.
     */
    protected void generateReport() {

        if (!toFile) return;

        listener.setErrors(result.errorCount());
        listener.setFailures(result.failureCount());
        listener.setRuns(result.runCount());
        listener.endTestSuite();
    }

    /**
     * This will cleanup the current test environment, for exmple shutting down servers etc after test execution
     */
    protected void cleanupTestEnvironment(TestSuiteElement testSuite) {
        shutdownServers(testSuite.getEnterpriseServer(), testSuite.getServers());
        StringHashtable testSuiteServersHashTable = testSuite.getServers();
        StringHashtable actualServers = testEnvironment.getServersList();
        Enumeration testSuiteServersEnumeration = testSuiteServersHashTable.elements();


        while (testSuiteServersEnumeration.hasMoreElements()) {
            TCServerElement testSuiteServer = (TCServerElement) testSuiteServersEnumeration.nextElement();
            ServerElement actualServer = (ServerElement) actualServers.get(testSuiteServer.getName());
            Map<String, ProfileElement> profiles = actualServer.getProfileElements();

            if (actualServer.isHA()) {

                //TCServerElement tcServer = (TCServerElement) servers.nextElement();
                //ServerElement server = testEnvironment.getServer(tcServer.getName());

                //String gatewayServerAddress = testEnvironment.getMachine(actualServer.getGatewayMachine()).getAddress();
                //boolean isGatewayMachineWindows = testEnvironment.getMachine(actualServer.getGatewayMachine()).isWindows();
                //String shareName = actualServer.getShareName();
                String primaryServerAddress = testEnvironment.getMachine(profiles.get("primary").getMachineName()).getAddress();
                String secondaryServerAddress = testEnvironment.getMachine(profiles.get("secondary").getMachineName()).getAddress();

                String lockPath = profiles.get("primary").getLockFilePath();
                if (!lockPath.startsWith("//")) {
                    String primaryLockFilePath = lockPath.substring(0, lockPath.lastIndexOf(File.separator));
                    unMountLock(primaryServerAddress, primaryLockFilePath);
                }

                lockPath = profiles.get("secondary").getLockFilePath();
                if (!lockPath.startsWith("//")) {
                    String secondaryLockFilePath = lockPath.substring(0, lockPath.lastIndexOf(File.separator));
                    unMountLock(secondaryServerAddress, secondaryLockFilePath);
                }
            }
        }
                
        File runtimeData = new File(testEnvConfig.getProperty("FIORANO_HOME") + File.separator + "runtimedata");
        String suiteRuntimeDataPath = testEnvConfig.getProperty("FIORANO_HOME") + File.separator + "runtimedata" + "_TestSuite_" + testSuite.getName();
        if(new File(suiteRuntimeDataPath).exists())
            deleteDir(suiteRuntimeDataPath);
        if (runtimeData.renameTo(new File(suiteRuntimeDataPath)))
            return;
        else System.out.println("WARNING: runtimedata not cleared on completion of Test Suite " + testSuite.getName());
    }

    private void deleteDir(String DirPath) {
        File dir = new File(DirPath);
        File[] serviceInsts = dir.listFiles();
        for (int i=0; i<serviceInsts.length; i++) {
            if (serviceInsts[i].isDirectory())
                deleteDir(serviceInsts[i].getAbsolutePath());
            else
                serviceInsts[i].delete();
        }
        dir.delete();
    }

    private void shutdownServers(String enterpriseServerName, StringHashtable serversList) {
        ExecutionController remoteProxy = ExecutionController.getInstance();
        for (Enumeration servers = serversList.elements(); servers.hasMoreElements();) {
            TCServerElement tcServer = (TCServerElement) servers.nextElement();
            ServerElement server = testEnvironment.getServer(tcServer.getName());
            Map<String, ProfileElement> profiles = server.getProfileElements();
            for (String profileType : profiles.keySet()) {
                ProfileElement profileElement = profiles.get(profileType);
                remoteProxy.shutdownServerOnRemote(testEnvironment.getMachine(profileElement.getMachineName()).getAddress(),
                        server.getMode(), profileElement.getProfileName(), profileElement.isWrapper(), server.isHA());
            }
        }
    }

    private void initializeTestSpecification(String testSpecFile) throws STFException {
        testSpecification = new TestSpecification();
        testSpecification.initializeTestSpec(testSpecFile);
    }

    /**
     * This will initialize the test environment.
     *
     * @throws STFException Will throw exception incase the data invalid.
     */
    private void initializeTestEnvironment(String testEnvFile) throws STFException {
        testEnvironment = new TestEnvironment();
        testEnvironment.initializeTestEnvironment(testEnvFile);

    }

    /**
     * This will deploy refrred profiles from test specification to respective machines.
     *
     * @param testSuite
     */
    private void deployProfiles(TestSuiteElement testSuite) throws STFException {

        String backupProfilesPath = ESBTestHarness.getTestEnvConfig().get(TestEnvironmentConstants.FIORANO_HOME) + File.separator + "esb" + File.separator
                + "server" + File.separator + "profiles_backup";
        String profilesPath = ESBTestHarness.getTestEnvConfig().get(TestEnvironmentConstants.FIORANO_HOME) + File.separator + "esb" + File.separator
                + "server" + File.separator + "profiles";
        try {
            ExecutionController remoteProxy = ExecutionController.getInstance();
            for (Enumeration servers = testSuite.getServers().elements(); servers.hasMoreElements();) {
                TCServerElement tcServer = (TCServerElement) servers.nextElement();
                ServerElement server = testEnvironment.getServer(tcServer.getName());
                // This will not deploy the server profiles if autostart is disabled
                if (!server.isAutoStartServer())
                    continue;
                //load properteis file -- this contains urls of prim /sec FES SERVERS.

                Map<String, ProfileElement> profiles = server.getProfileElements();
                ProfileElement profileElem;

                if (server.isHA()) {
                    //Create Primary Deployment Unit
                    profileElem = profiles.get("primary");
                    DeploymentUnit primaryDeploymentUnit = new DeploymentUnit();
                    primaryDeploymentUnit.setHAProfile(true);
                    primaryDeploymentUnit.setProfileDir(profileElem.getProfileName());
                    primaryDeploymentUnit.setMachineAddress(testEnvironment.getMachine(profileElem.getMachineName()).getAddress());
                    if (server.getMode().equalsIgnoreCase(TestEnvironmentConstants.FPS)) {
                        primaryDeploymentUnit.setPrimaryFESUrl(testEnvironment.getMachine(server.getPrimaryFESUrl()).getAddress());
                        primaryDeploymentUnit.setSecFESUrl(testEnvironment.getMachine(server.getSecondaryFESUrl()).getAddress());
                        primaryDeploymentUnit.setBackupPeerURL(testEnvironment.getMachine(profiles.get("secondary").getMachineName()).getAddress());
                    } else {
                        primaryDeploymentUnit.setSecFESUrl(testEnvironment.getMachine(profiles.get("secondary").getMachineName()).getAddress());
                    }
                    primaryDeploymentUnit.setLockFilePath(profileElem.getLockFilePath());
                    primaryDeploymentUnit.setProfileType(server.getMode(), true, true);
                    primaryDeploymentUnit.setServerConfigFilePath(primaryDeploymentUnit.getProfileType(), profileElem.getProfileName());
                    primaryDeploymentUnit.setGatewayMachineAddress(testEnvironment.getMachine(server.getGatewayMachine()).getAddress());
                    remoteProxy.deployProfile(primaryDeploymentUnit, this.getTestEnvConfig());

                    //Create secondary Deployment Unit
                    profileElem = profiles.get("secondary");
                    DeploymentUnit secondaryDeploymentUnit = new DeploymentUnit();
                    secondaryDeploymentUnit.setHAProfile(true);
                    secondaryDeploymentUnit.setProfileDir(profileElem.getProfileName());
                    secondaryDeploymentUnit.setMachineAddress(testEnvironment.getMachine(profileElem.getMachineName()).getAddress());
                    if (server.getMode().equalsIgnoreCase(TestEnvironmentConstants.FPS)) {
                        secondaryDeploymentUnit.setPrimaryFESUrl(testEnvironment.getMachine(server.getPrimaryFESUrl()).getAddress());
                        secondaryDeploymentUnit.setSecFESUrl(testEnvironment.getMachine(server.getSecondaryFESUrl()).getAddress());
                        secondaryDeploymentUnit.setBackupPeerURL(testEnvironment.getMachine(profiles.get("primary").getMachineName()).getAddress());
                    } else {
                        secondaryDeploymentUnit.setPrimaryFESUrl(testEnvironment.getMachine(profiles.get("primary").getMachineName()).getAddress());
                    }
                    secondaryDeploymentUnit.setLockFilePath(profileElem.getLockFilePath());
                    secondaryDeploymentUnit.setProfileType(server.getMode(), true, false);
                    secondaryDeploymentUnit.setServerConfigFilePath(secondaryDeploymentUnit.getProfileType(), profileElem.getProfileName());
                    secondaryDeploymentUnit.setGatewayMachineAddress(testEnvironment.getMachine(server.getGatewayMachine()).getAddress());
                    remoteProxy.deployProfile(secondaryDeploymentUnit, this.getTestEnvConfig());

                } else {
                    profileElem = profiles.get("standalone");
                    //Create Deployment Unit
                    DeploymentUnit deploymentUnit = new DeploymentUnit();
                    deploymentUnit.setHAProfile(false);
                    deploymentUnit.setProfileDir(profileElem.getProfileName());
                    deploymentUnit.setMachineAddress(testEnvironment.getMachine(profileElem.getMachineName()).getAddress());
                    deploymentUnit.setProfileType(server.getMode(), false, false);
                    deploymentUnit.setServerConfigFilePath(deploymentUnit.getProfileType(), profileElem.getProfileName());
                    deploymentUnit.setIsSSL(server.isSsl());
                    deploymentUnit.setIsJetty(server.isJetty());
                    deploymentUnit.setIsbasicAuth(server.isbasicAuth());
                    if (server.getMode().equalsIgnoreCase(TestEnvironmentConstants.FPS)) {
                        deploymentUnit.setPrimaryFESUrl(testEnvironment.getMachine(server.getPrimaryFESUrl()).getAddress());
                        deploymentUnit.setSecFESUrl(testEnvironment.getMachine(server.getSecondaryFESUrl()).getAddress());
                    }
                    remoteProxy.deployProfile(deploymentUnit, this.getTestEnvConfig());
                }
            }

            String profilesZipName = "profiles.zip";
            String serverConfigs = "serverConfigs.zip";
            remoteProxy.sendProfiles(profilesZipName);
            remoteProxy.sendConfiguration(serverConfigs);

        } catch (STFException e) {
            File profilesDir = new File(profilesPath);
            deleteDir(profilesDir);
            File backupProfilesDir = new File(backupProfilesPath);
            if (!backupProfilesDir.renameTo(profilesDir))
                System.out.println("ALERT !!! COULDN'T REVERT BACKUP PROFILES");
            e.printStackTrace();
        }
    }

    private void deleteDir(File dirName) {
        for (File file : dirName.listFiles()) {
            if (file.isDirectory())
                deleteDir(file);
            else file.delete();
        }
        dirName.delete();
    }

    private void sleep(long duration) {
        try {
            Thread.sleep(duration);
        }
        catch (InterruptedException e) {
        }
    }

    public static void main(String args[]) throws Exception {

        ESBTestHarness testHarness = new ESBTestHarness();
        TestEnvironmentConfig config = new TestEnvironmentConfig();
        config.load(new File(args[0]));
        testHarness.setTestEnvConfig(config);
        DRTTestLogger.initializeLogger();

        //this value will be sent from sources/testing/QA/esb/build.xml which inturn gets from sources/QA/esb/STF/BuildController/build.xml to which we have to pass as command line argument. by default the value is "START".
        if (args.length > 1) {
            if (args[1].equals("PASS"))
                testHarness.serverCare = new String("PASS");
        }
        testHarness.execute();
        System.exit(0);
    }

    private String getAddress(String url) {
        if (url == null) return null;

        int protocolEnd = url.indexOf("//");
        int addBegin;
        if (protocolEnd == -1) addBegin = 0;
        else addBegin = protocolEnd + 2;

        int addEnd = url.indexOf(':', addBegin);
        if (addEnd == -1) addEnd = url.length();

        return url.substring(addBegin, addEnd);
    }
}
